name: Full Scope Scanner

on:
  push:
    paths:
      - 'inscope_*.txt'
      - 'newdata_*.txt'
  workflow_dispatch:

jobs:
  scanner:
    runs-on: ubuntu-latest

    steps:
      - name: üîÑ Checkout Code
        uses: actions/checkout@v4

      - name: üìÅ Make Scripts Executable
        run: chmod +x scripts/*.sh
        
      - name: üîé Debug Script Files
        run: ls -l scripts/
        
      - name: üîß Setup Dependencies
        run: |
          # üîÅ Refresh and install core tools
          sudo apt update -y
          sudo apt install -y zip curl wget git gnupg lsb-release software-properties-common jq python3-pip
          
          # üß† Install Go
          sudo apt install -y golang

          # üî≠ Add Google Chrome (for headless browser tools)
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt update -y
          sudo apt install -y google-chrome-stable

          # ‚úÖ Setup Go path and install tools
          echo "export PATH=$PATH:$(go env GOPATH)/bin" >> $GITHUB_ENV
          echo "$HOME/go/bin" >> $GITHUB_PATH

          go install github.com/projectdiscovery/katana/cmd/katana@latest
          go install github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
          go install github.com/tomnomnom/waybackurls@latest
          go install github.com/projectdiscovery/httpx/cmd/httpx@latest
          go install github.com/hahwul/dalfox/v2@latest
          go install github.com/projectdiscovery/notify/cmd/notify@latest
          go install github.com/kdairatchi/sqry@latest

          pip install wafw00f
          
          git clone https://github.com/kdairatchi/loxs.git
          cd loxs
          pip3 install -r requirements.txt
          sudo bash setup.sh
          cd ..

      - name: üìÅ Ensure Directories Exist
        run: |
          mkdir -p recon_output scans logs reports
          touch scans/history.log

      - name: üìÇ Check Required Files
        run: |
          ls data/Domains/inscope_domains.txt data/NewData/newdata_inscope_domains.txt || echo "‚ö†Ô∏è Missing scope files!"

      - name: üìä Run Recon
        run: scripts/recon.sh

      - name: üïµÔ∏è Dork Scanning with sqry
        run: |
          mkdir -p recon_output/sqry
          for domain in $(cat data/Domains/inscope_domains.txt); do
            while read dork; do
              dork=$(echo "$dork" | sed "s/{{domain}}/$domain/g")
              echo "Running sqry for: $dork"
              sqry -q "$dork" -o recon_output/sqry/$domain_dorks.txt
            done < dorks.txt
          done

      - name: üì¢ Notify sqry results
        run: |
          cat recon_output/sqry/* | notify -p discord -c notify.conf

      - name: üõ†Ô∏è Amass Passive Recon
        run: |
          amass enum -passive -df data/Domains/inscope_domains.txt -o recon_output/amass.txt || true
      
      - name: üì¢ Notify amass results
        run: |
          cat recon_output/amass.txt | notify -p discord -c notify.conf

      - name: üïµÔ∏è Run loxs on discovered IPs
        run: |
          mkdir -p recon_output/loxs
          cat recon_output/httpx.json | jq -r '.ip' | sort -u > recon_output/ips.txt
          loxs -f recon_output/ips.txt --json > recon_output/loxs/loxs_results.json

      - name: üì¢ Notify loxs results
        run: |
          cat recon_output/loxs/loxs_results.json | notify -p discord -c notify.conf

      - name: üì• Fetch Fuzzing Wordlist
        run: |
          mkdir -p wordlists
          curl -s https://raw.githubusercontent.com/danielmiessler/SecLists/master/Discovery/Web-Content/common.txt -o wordlists/common.txt

      - name: üí• Fuzz with ffuf
        run: |
          mkdir -p recon_output/ffuf
          while read url; do
            ffuf -u "$url/FUZZ" -w wordlists/common.txt -o "recon_output/ffuf/$(echo $url | md5sum | cut -d' ' -f1).json" -of json || true
          done < recon_output/all_urls.txt

      - name: üö® Scan for XSS with Dalfox
        run: |
          mkdir -p recon_output/dalfox
          dalfox file recon_output/all_urls.txt --output recon_output/dalfox/dalfox.txt || true

      - name: üì¢ Notify dalfox results
        run: |
          cat recon_output/dalfox/dalfox.txt | notify -p discord -c notify.conf

      - name: üßúÔ∏è XSStrike XSS Testing
        run: |
          mkdir -p recon_output/xsstrike
          git clone https://github.com/s0md3v/XSStrike.git xsstrike
          cd xsstrike && pip install -r requirements.txt && cd ..
          while read url; do
            python3 xsstrike/xsstrike.py -u "$url" --crawl --blind || true
          done < recon_output/all_urls.txt

      - name: üõ°Ô∏è WAF Detection (wafw00f)
        run: |
          mkdir -p recon_output/waf
          while read url; do
            wafw00f "$url" >> recon_output/waf/results.txt || true
          done < recon_output/all_urls.txt

      - name: üèãÔ∏è Run ZAP Full Scan
        run: scripts/zap_scan.sh

      - name: ‚ö°Ô∏è Run Nuclei Scan
        run: scripts/nuclei_scan.sh

      - name: üìé Generate Markdown Report
        run: scripts/generate_report.sh

      - name: ‚úÖ Git Commit & Push
        run: scripts/git_push_changes.sh

      - name: üóÉÔ∏è Archive HTML Reports
        uses: actions/upload-artifact@v4
        with:
          name: html-scan-reports
          path: |
            zap_reports/
            recon_output/**/*.html
